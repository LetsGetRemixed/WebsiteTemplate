name: Merge Workflow

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: [20.x]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install root dependencies
      run: npm ci || npm install
      
    - name: Install client dependencies
      run: |
        cd client
        npm ci || npm install
        
    - name: Run linting
      run: |
        npm run lint || echo "Linting not configured yet"
        
    - name: Run tests
      run: |
        npm test || echo "Tests not configured yet"
        
    - name: Build client
      run: |
        cd client
        npm run build
        
    - name: Verify build output
      run: |
        test -d client/dist || (echo "Build failed - dist directory not found" && exit 1)
        echo "✅ Build verification passed"

  deploy:
    needs: test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20.x'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci || npm install
        npm --prefix client ci || npm --prefix client install
        npm --prefix server ci || npm --prefix server install
        
    - name: Build project
      run: |
        cd client
        echo "VITE_BACKEND_URL=${{ secrets.VITE_BACKEND_URL }}" > .env
        npm run build
        
    - name: Deploy to Firebase
      run: |
        cd server
        echo "MONGODB_URI=${{ secrets.MONGODB_URI }}" > .env
        echo "CLIENT_URL=${{ secrets.CLIENT_URL }}" >> .env
        echo "DEBUG_ENV_ENDPOINT=${{ secrets.DEBUG_ENV_ENDPOINT }}" >> .env
        cd ../
        npx firebase-tools@latest deploy --only hosting,functions --force --project ${{ secrets.FIREBASE_PROJECT_ID }} --token ${{ secrets.FIREBASE_GIT_SECRET }}
        
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "✅ Deployment completed successfully"
        else
          echo "❌ Deployment failed"
        fi

